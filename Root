import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as seabornInstance
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

#%matplotlib inline

dataset = pd.read_csv('Weather.csv')

print(dataset.shape)

print(dataset.describe())

dataset.plot(x='MinTemp',y='MaxTemp',style='o')
plt.title('Minimum vs Maximum')
plt.xlabel('MinTemp')
plt.ylabel('MaxTemp')
plt.show()

plt.figure(figsize=(10,10))
plt.tight_layout()
seabornInstance.displot(dataset['MaxTemp'])
plt.show()

#Data Splicing
X=dataset['MinTemp'].values.reshape(-1,1)
y=dataset['MaxTemp'].values.reshape(-1,1)

X_train,X_test ,y_train,y_test = train_test_split(X, y,test_size=0.2,random_state=0)

#Building The Model
regressor = LinearRegression()
regressor.fit(X_train,y_train) #Training the algorithm

#To retrive the intercept:
print('Intercept:',regressor.intercept_)
print('Coefficient::',regressor.coef_)

#Actual Maimum Temp To Predict maximum Temp
y_pred=regressor.predict(X_test)

df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})
print(df)

df1=df.plot(kind='bar',figsize=(16,10))
plt.grid(which='major',linestyle='-',linewidth='0.5',color='green')
plt.grid(which='minor',linestyle=':',linewidth='0.5',color='black')
plt.show()

#Drawing Straight line plot
plt.scatter(X_test,y_test,color='gray')
plt.plot(X_test,y_pred,color='red',linewidth=2)
plt.show()

#Evalute the performance of the algorithm
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test,y_pred))
print('Mean Squared Error:',metrics.mean_squared_error(y_test,y_pred))
print('Root mean Square Error:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))



